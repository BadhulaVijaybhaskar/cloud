// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid()) @db.Uuid
  email         String   @unique
  password_hash String
  created_at    DateTime @default(now()) @db.Timestamptz

  workspaces Workspace[]
  members    WorkspaceMember[]

  @@map("users")
}

model Workspace {
  id         String   @id @default(uuid()) @db.Uuid
  name       String
  owner_id   String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz

  owner     User              @relation(fields: [owner_id], references: [id])
  members   WorkspaceMember[]
  artifacts ArtifactStore[]

  @@map("workspaces")
}

model WorkspaceMember {
  workspace_id String @db.Uuid
  user_id      String @db.Uuid
  role         String @default("member")

  workspace Workspace @relation(fields: [workspace_id], references: [id])
  user      User      @relation(fields: [user_id], references: [id])

  @@id([workspace_id, user_id])
  @@map("workspace_members")
}

model ArtifactStore {
  id           String   @id @default(uuid()) @db.Uuid
  workspace_id String   @db.Uuid
  key          String
  url          String
  size_bytes   BigInt?
  created_at   DateTime @default(now()) @db.Timestamptz

  workspace Workspace @relation(fields: [workspace_id], references: [id])

  @@map("artifact_store")
}

model Event {
  id           String   @id @default(uuid()) @db.Uuid
  workspace_id String?  @db.Uuid
  project      String?
  type         String
  payload      Json?
  created_at   DateTime @default(now()) @db.Timestamptz

  @@map("events")
}

// Tenant schema models (for each workspace schema ws_<id>)
// These are not in the public schema, but we define them here for type generation
// In practice, these tables are created dynamically per workspace

model Project {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?
  created_by  String?  @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamptz

  items Item[]

  @@map("projects")
}

model Item {
  id         String   @id @default(uuid()) @db.Uuid
  project_id String   @db.Uuid
  data       Json?
  created_at DateTime @default(now()) @db.Timestamptz

  project Project @relation(fields: [project_id], references: [id])

  @@map("items")
}

model Embedding {
  id         String                 @id @default(uuid()) @db.Uuid
  project_id String?                @db.Uuid
  text_chunk String
  vector     Unsupported("vector")?

  @@map("embeddings")
}
