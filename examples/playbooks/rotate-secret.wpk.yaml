apiVersion: v1
kind: WorkflowPackage
metadata:
  name: rotate-secret
  version: "1.0.0"
  description: "Rotate secrets with zero-downtime deployment update"
  author: "ATOM DevOps Team"
  created: "2024-01-15T10:00:00Z"
  tags: ["security", "secrets", "rotation", "vault"]
  signature: ""
spec:
  runtime:
    type: k8s
    version: "1.28+"
    requirements:
      cpu: "100m"
      memory: "128Mi"
      storage: "256Mi"
  safety:
    mode: manual
    approval_required: true
    dry_run_required: true
    rollback_enabled: true
  triggers:
    - type: schedule
      config:
        cron: "0 0 1 * *"  # Monthly
    - type: webhook
      config:
        path: "/rotate-secret"
        auth: "bearer"
  handlers:
    - name: generate-new-secret
      type: api
      config:
        url: "${VAULT_ADDR}/v1/database/creds/${SECRET_ROLE}"
        method: "GET"
        headers:
          "X-Vault-Token": "${VAULT_TOKEN}"
      timeout: "30s"
      retry:
        max_attempts: 2
        backoff: "5s"
    - name: update-k8s-secret
      type: k8s
      config:
        action: patch
        resource_type: secret
        name: "${SECRET_NAME}"
        data: "new_credentials"
      timeout: "15s"
      retry:
        max_attempts: 2
        backoff: "3s"
    - name: rolling-restart
      type: k8s
      config:
        action: restart
        resource_type: deployment
        selector: "app=${APP_NAME}"
      timeout: "300s"
      retry:
        max_attempts: 1
        backoff: "30s"
    - name: verify-functionality
      type: api
      config:
        url: "${APP_HEALTH_URL}"
        method: "GET"
        expected_status: 200
      timeout: "60s"
      retry:
        max_attempts: 5
        backoff: "10s"
    - name: revoke-old-secret
      type: api
      config:
        url: "${VAULT_ADDR}/v1/sys/leases/revoke"
        method: "PUT"
        payload: "old_lease_id"
      timeout: "30s"
      retry:
        max_attempts: 2
        backoff: "5s"
  rollback:
    enabled: true
    handlers:
      - name: restore-old-secret
        type: k8s
        config:
          action: patch
          resource_type: secret
          name: "${SECRET_NAME}"
          data: "old_credentials"
  validation:
    schema_version: "v1"
    required_permissions:
      - "secrets/patch"
      - "deployments/patch"
      - "vault/generate"
    resource_limits:
      max_secrets: 5
  monitoring:
    metrics_enabled: true
    logging_level: warn
    alerts:
      - type: slack
        webhook: "${SECURITY_WEBHOOK_URL}"
        on_success: true
        on_failure: true