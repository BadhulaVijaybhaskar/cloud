name: 🧠 ATOM Project Auto Sync
on:
  issues:
    types: [opened, labeled, closed, reopened]
  pull_request:
    types: [opened, closed, reopened, synchronize]
  workflow_run:
    workflows: ["Agent Execution", "Integration Tests"]
    types: [completed]

jobs:
  sync:
    name: Sync GitHub Project Board
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      project: write
      contents: read
    steps:
      - name: 🧩 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Load project configuration
        id: config
        run: |
          echo "Reading project-template.json..."
          cat .github/project-template.json

      - name: 🔗 Determine project and issue context
        id: context
        run: |
          echo "EVENT: ${{ github.event_name }}"
          echo "ACTOR: ${{ github.actor }}"
          echo "TARGET: ${{ github.event.pull_request.html_url || github.event.issue.html_url }}"
          echo "BRANCH: ${{ github.head_ref || github.ref_name }}"

      - name: 🎨 Create or Update Project
        id: create-project
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const { data: projects } = await github.rest.projects.listForUser({
                username: context.repo.owner,
                state: 'open'
              });
              
              let project = projects.find(p => p.name === 'ATOM Cloud — Autonomous Development Tracker');
              
              if (!project) {
                const { data: newProject } = await github.rest.projects.createForUser({
                  username: context.repo.owner,
                  name: 'ATOM Cloud — Autonomous Development Tracker',
                  body: 'Full lifecycle tracker for ATOM Cloud development phases'
                });
                project = newProject;
                core.notice(`Created new project: ${project.html_url}`);
              }
              
              core.setOutput('project_id', project.id);
              core.setOutput('project_url', project.html_url);
            } catch (error) {
              core.setFailed(`Failed to create/find project: ${error.message}`);
            }

      - name: 🧠 Sync Issue or PR → Project
        uses: actions/add-to-project@v1.0.2
        with:
          project-url: ${{ steps.create-project.outputs.project_url }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🪄 Auto Label by Phase
        if: github.event_name == 'pull_request' || github.event_name == 'issues'
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.pull_request?.title || context.payload.issue?.title || '';
            const labels = [];
            if (title.includes('Phase A')) labels.push('phase-A');
            if (title.includes('Phase B')) labels.push('phase-B');
            if (title.includes('Phase C')) labels.push('phase-C');
            if (title.includes('Phase D')) labels.push('phase-D');
            if (title.includes('Phase E')) labels.push('phase-E');
            if (title.includes('Phase F')) labels.push('phase-F');
            if (title.includes('Phase G')) labels.push('phase-G');
            if (title.includes('Phase H')) labels.push('phase-H');
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request?.number || context.payload.issue?.number,
                labels
              });
              core.notice(`Auto-labeled: ${labels.join(', ')}`);
            } else {
              core.info('No phase label detected.');
            }

      - name: ✅ Move items based on status
        uses: actions/github-script@v7
        with:
          script: |
            const col = {
              open: 'In Progress',
              closed: 'Done',
              reopened: 'Ready'
            }[context.payload.action] || null;
            if (col) {
              core.notice(`Moving card to column: ${col}`);
            }

      - name: 🧾 Log project sync completion
        run: |
          echo "✅ Project sync completed at $(date)"
