name: 🧠 ATOM Project Auto Sync
on:
  workflow_dispatch:
  issues:
    types: [opened, labeled, closed, reopened]
  pull_request:
    types: [opened, closed, reopened, synchronize]
  workflow_run:
    workflows: ["Agent Execution", "Integration Tests"]
    types: [completed]

jobs:
  sync:
    name: Sync GitHub Project Board
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read
      repository-projects: write
    steps:
      - name: 🧩 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Load project configuration
        id: config
        run: |
          echo "Reading project-template.json..."
          cat .github/project-template.json

      - name: 🔗 Determine project and issue context
        id: context
        run: |
          echo "EVENT: ${{ github.event_name }}"
          echo "ACTOR: ${{ github.actor }}"
          echo "TARGET: ${{ github.event.pull_request.html_url || github.event.issue.html_url }}"
          echo "BRANCH: ${{ github.head_ref || github.ref_name }}"

      - name: 📝 Create Test Issue (if manual trigger)
        id: create-test-issue
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Phase F.5 Test - Project Sync Verification',
              body: 'This is a test issue to verify GitHub project sync functionality.',
              labels: ['phase-F']
            });
            core.notice(`Created test issue: ${issue.html_url}`);
            core.setOutput('test_issue_number', issue.number);

      - name: 🧠 Sync Issue or PR → Project
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const query = `
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                  item {
                    id
                  }
                }
              }
            `;
            
            const projectId = "PVT_kwHOCgKJBs4AqQWF"; // Project ID for project #5
            let issueNumber = context.payload.issue?.number || context.payload.pull_request?.number;
            
            // For manual triggers, get the test issue number from previous step
            if (!issueNumber && context.eventName === 'workflow_dispatch') {
              issueNumber = '${{ steps.create-test-issue.outputs.test_issue_number }}';
              if (issueNumber && issueNumber !== '') {
                issueNumber = parseInt(issueNumber);
              } else {
                issueNumber = null;
              }
            }
            
            if (issueNumber) {
              try {
                const { data: issue } = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });
                
                const result = await github.graphql(query, {
                  projectId: projectId,
                  contentId: issue.node_id
                });
                
                core.notice(`Added issue #${issueNumber} to project`);
              } catch (error) {
                core.warning(`Failed to add to project: ${error.message}`);
              }
            } else {
              core.info('No issue number found to sync');
            }

      - name: 🪄 Auto Label by Phase
        if: github.event_name == 'pull_request' || github.event_name == 'issues'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = context.payload.pull_request?.title || context.payload.issue?.title || '';
            const labels = [];
            
            // Check for specific decimal phases first
            if (title.includes('Phase F.5')) labels.push('phase-F.5');
            else if (title.includes('Phase F.6')) labels.push('phase-F.6');
            else if (title.includes('Phase 0.5')) labels.push('phase-0.5');
            // Then check for main phases
            else if (title.includes('Phase A')) labels.push('phase-A');
            else if (title.includes('Phase B')) labels.push('phase-B');
            else if (title.includes('Phase C')) labels.push('phase-C');
            else if (title.includes('Phase D')) labels.push('phase-D');
            else if (title.includes('Phase E')) labels.push('phase-E');
            else if (title.includes('Phase F')) labels.push('phase-F');
            else if (title.includes('Phase G')) labels.push('phase-G');
            else if (title.includes('Phase H')) labels.push('phase-H');
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request?.number || context.payload.issue?.number,
                labels
              });
              core.notice(`Auto-labeled: ${labels.join(', ')}`);
            } else {
              core.info('No phase label detected.');
            }

      - name: ✅ Move items based on status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const col = {
              open: 'In Progress',
              closed: 'Done',
              reopened: 'Ready'
            }[context.payload.action] || null;
            if (col) {
              core.notice(`Moving card to column: ${col}`);
            }

      - name: 🧾 Log project sync completion
        run: |
          echo "✅ Project sync completed at $(date)"
